//------------------------------------------------------------------------
// ● 使用ライブラリの宣言
//------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
//========================================================================
// ■ State_Base_Camera
//------------------------------------------------------------------------
//	カメラの基盤状態クラス。
//========================================================================

public class State_Base_Camera : State_Base_Entity {
	//--------------------------------------------------------------------
	// ● メンバ変数
	//--------------------------------------------------------------------
	protected new Main_Camera ai;	// ＡＩ本体
	//--------------------------------------------------------------------
	// ● 初期化
	//--------------------------------------------------------------------
	public override void initialize() {
		base.initialize();
		
		ai = (Main_Camera)base.ai;
	}
	//--------------------------------------------------------------------
	// ● 障害物を考慮し、補正
	//--------------------------------------------------------------------
	protected void correct_obstacle(Vector3 target_position) {
		// カメラ間の障害物を検出
		RaycastHit hit_info;
		var hit = Physics.Linecast(
			target_position,
			ai.transform.position,
			out hit_info,
			LayerMask.GetMask( new string[] {"Ground", "Sea_For_Camera"} )
		);
		// 障害物が存在する場合、障害物の手前位置に修正
		if (hit)
			ai.transform.position = hit_info.point;
	}
	//--------------------------------------------------------------------
	// ● 更新
	//--------------------------------------------------------------------
	public override void update() {
		base.update();
		
/*
		// カメラ向きキーが押されている場合、対象を向くか切り替える
		if ( Input.GetButton("camera_look") )
			ai.fsm.change( new State_Look_Camera() );
*/
	}
	//--------------------------------------------------------------------
	// ● 更新（遅）
	//--------------------------------------------------------------------
	public override void late_update() {
		base.late_update();
	}
	//--------------------------------------------------------------------
	// ● 終了
	//--------------------------------------------------------------------
	public override void finalize() {
		base.finalize();
	}
	//--------------------------------------------------------------------
	// ● 衝突情報を受信
	//--------------------------------------------------------------------
	public override void receive_collision_data(ref Collision_Data data) {
		base.receive_collision_data(ref data);
	}
}